#!/bin/sh

################################################################################
#
# ClipURI
#
# Converts the image currently in the clipboard between png and data URI.
#
# Error codes:
#     2) Invalid arguments.
#     3) Clipboard could not be decoded as image.
#
################################################################################


usage() {
    echo "clipuri [OPTION]"
    echo "  -h             display help message"
    echo "  -u             convert image in clipboard into data URI (default)"
    echo "  -p             convert image/data URI in clipboard to png"
}


## Parse arguments #############################################################

while getopts "hup" arg
do
    case $arg in
        h)
            h="SET"
            ;;
        u)
            u="SET"
            ;;
        p)
            p="SET"
            ;;
        *)
            echo "Invalid argument '$arg'" 1>&2
            usage 1>&2
            exit 2
            ;;
    esac
done

# If help is requested, provide it and exit.
if [ -n "$h" ]
then
    usage
    exit
fi

# Check argument validity.
if [ -n "$u" ] && [ -n "$p" ]
then
    echo "Options -u and -p are mutually exclusive" 1>&2
    usage 1>&2
    exit 2
fi

# Default arguments.
if [ -z "$p" ]
then
    u="SET"
fi


## Create data URI #############################################################

if [ -n "$u" ]
then

    # Specify that the image should be transferred using PNG compression.
    mimetype="image/png"

    # Get the image that's currently in the clipboard and read the URI data.
    content=`xclip -selection clipboard -t "$mimetype" -o 2> /dev/null | base64 -w0`

    # Check if it was sucessful. This will fail if the item in the clipboard was
    # not an image.
    if [ -z "$content" ]
    then
        echo "Clipboard not recognised as image" >&2
        exit 3
    fi

    # Format the data and insert it into the clipboard. This is formatted such
    # that it can be inserted into the parentheses in markdown like so:
    #   ![image](<CLIPBOARD_OUTPUT>)
    echo -n "data:$mimetype;base64,$content" | xclip -selection clipboard

fi


## Create png ##################################################################

if [ -n "$p" ]
then
    # The content is already formatted as png. Insert that straight into the
    # clipboard.
    xclip -selection clipboard -o 2> /dev/null | sed -e 's#data:image/png;base64,##' | base64 --decode | xclip -selection clipboard -t image/png -i
fi

